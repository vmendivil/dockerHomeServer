version: "3.8"

networks:
  t2proxy:
    external:
      name: t2proxy
  myvpn:
    external:
      name: myvpn
  database:
    external:
      name: database

services:

  # Traefik v2
  traefik2proxy:
    image: traefik:picodon # chevrotin tag refers to v2.3.x
    container_name: traefik2proxy
    restart: always
    networks:
      - t2proxy
    ports:
      - 80:80
      - 443:443
    command:
      # General
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=false
      # Log
      - --log=true
      - --log.level=INFO # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/traefik.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      # Api
      - --api.dashboard=true
      # Entry Points
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      # Pilot
      - --pilot.token=$TRAEFIKPILOTKEY
      # Providers
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=t2proxy
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory.
      - --providers.file.watch=true # Only works on top level files in the rules folder
      # LetsEncrypt HTTP Challenge (enable access on port 80)
#      - --certificatesresolvers.letsencrypt.acme.httpchallenge=true
#      - --certificatesresolvers.letsencrypt.acme.httpchallenge.entrypoint=web
#      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.httpchallenge.letsencrypt.json # File must have chmod 600
      # LetsEncrypt TLS Challenge (might need comment all references to port 80 and entrypoint.web)
#      - --certificatesresolvers.letsencrypt.acme.tlschallenge=true
      # LetsEncrypt DNS Challenge (add environment variables and ensure tls.domain labels are in place)
      - --certificatesResolvers.letsencrypt.acme.dnsChallenge.provider=cloudflare
      - --certificatesResolvers.letsencrypt.acme.dnsChallenge.delayBeforeCheck=5 # Seconds
      - --certificatesResolvers.letsencrypt.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.dnschallenge.cloudflare.json # File must have chmod 600
      # LetsEncrypt General Config
#      - --certificatesresolvers.letsencrypt.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory # Only for testing
      - --certificatesresolvers.letsencrypt.acme.email=$CLOUDFLARE_EMAIL
#      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json # Ensure no other storage is active on challenges. File must have chmod 600
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "$PROXYDIR/traefik2proxy/rules:/rules"
      - "$PROXYDIR/traefik2proxy/letsencrypt:/letsencrypt"
      - "$PROXYDIR/traefik2proxy/traefik.log:/traefik.log"
    environment:
      - CF_API_EMAIL=$CLOUDFLARE_EMAIL
      - CF_API_KEY=$CLOUDFLARE_API_KEY
    labels:
      - "traefik.enable=true"
      # Router
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAINNAME`)"
      - "traefik.http.routers.traefik-rtr.entrypoints=websecure"
#      - "traefik.http.routers.traefik-rtr.tls=true"
      - "traefik.http.routers.traefik-rtr.tls.certresolver=letsencrypt"
      # Middleware
      - "traefik.http.routers.traefik-rtr.middlewares=chain-oauth@file"
      # Service
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      # Domains
      - "traefik.http.routers.traefik-rtr.tls.domains[0].main=$DOMAINNAME"
      - "traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.$DOMAINNAME"
      - "traefik.http.routers.traefik-rtr.tls.domains[1].main=$DOMAINNAME_BLOG"
      - "traefik.http.routers.traefik-rtr.tls.domains[1].sans=*.$DOMAINNAME_BLOG"
      # Http to Https Redirect
      - "traefik.http.routers.http-catchall-rtr.rule=hostregexp(`{any:.+}`)"
      - "traefik.http.routers.http-catchall-rtr.entrypoints=web"
      - "traefik.http.routers.http-catchall-rtr.middlewares=redirect-to-https-mdl@docker"
      - "traefik.http.middlewares.redirect-to-https-mdl.redirectscheme.scheme=https"
      - "traefik.http.middlewares.redirect-to-https-mdl.redirectscheme.permanent=true"

  # Google OAuth - Single Sign On using OAuth 2.0 for Traefik 2.2
  # https://console.developers.google.com/
  oauth:
    container_name: oauth
    # image: thomseddon/traefik-forward-auth:latest
    image: thomseddon/traefik-forward-auth:2.1-arm # Use this image with Raspberry Pi
    restart: always
    networks:
      - t2proxy
    security_opt:
      - no-new-privileges:true
    environment:
      - CLIENT_ID=$GOOGLE_CLIENT_ID
      - CLIENT_SECRET=$GOOGLE_CLIENT_SECRET
      - SECRET=$OAUTH_SECRET
      - COOKIE_DOMAIN=$DOMAINNAME
      - INSECURE_COOKIE=false
      - AUTH_HOST=oauth.$DOMAINNAME
      - URL_PATH=/_oauth # must match url defined in google web application
      - WHITELIST=$OAUTH_EMAIL_1,$OAUTH_EMAIL_2,$OAUTH_EMAIL_3 # email1,email2,email3 or $EMAIL1,$EMAIL2,$EMAIL3
      - LOG_LEVEL=info
      - LOG_FORMAT=text
      - LIFETIME=$OAUTH_SESSION_LIFETIME
      - DEFAULT_ACTION=auth
      - DEFAULT_PROVIDER=google
    labels:
      - "traefik.enable=true"
      # Router
      - "traefik.http.routers.oauth-rtr.rule=Host(`oauth.$DOMAINNAME`)"
      - "traefik.http.routers.oauth-rtr.entrypoints=websecure"
#      - "traefik.http.routers.oauth-rtr.tls=true"
      - "traefik.http.routers.oauth-rtr.tls.certresolver=letsencrypt"
      # Middleware
      - "traefik.http.routers.oauth-rtr.middlewares=chain-oauth@file"
      # Service
      - "traefik.http.routers.oauth-rtr.service=oauth-svc"
      - "traefik.http.services.oauth-svc.loadbalancer.server.port=4181"

  # Cloudflare DDNS - Dynamic DNS Updater
  myownsite-cf-ddns:
    container_name: myownsite-cf-ddns
    image: oznu/cloudflare-ddns:latest
    restart: always
    security_opt:
      - no-new-privileges:true
    environment:
      - API_KEY=$CLOUDFLARE_API_TOKEN
      - ZONE=$DOMAINNAME
      - PROXIED=true
      - RRTYPE=A
      - DELETE_ON_STOP=false
      - DNS_SERVER=1.1.1.1

  # Cloudflare DDNS - Dynamic DNS Updater
  blog-cf-ddns:
    container_name: blog-cf-ddns
    image: oznu/cloudflare-ddns:latest
    restart: always
    security_opt:
      - no-new-privileges:true
    environment:
      - API_KEY=$CLOUDFLARE_API_TOKEN
      - ZONE=$DOMAINNAME_BLOG
      - PROXIED=true
      - RRTYPE=A
      - DELETE_ON_STOP=false
      - DNS_SERVER=1.1.1.1

  # Dozzle - Real-time Docker Log Viewer
  dozzle:
    image: amir20/dozzle:latest
    container_name: dozzle
    restart: unless-stopped
    networks:
      - t2proxy
    security_opt:
      - no-new-privileges:true
    ports:
      - "$DOZZLE_PORT:8080"
    environment:
      DOZZLE_LEVEL: info
      DOZZLE_TAILSIZE: 300
#      DOZZLE_FILTER: "status=running"
#      DOZZLE_FILTER: "label=log_me" # limits logs displayed to containers with this label
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    labels:
      - "traefik.enable=true"
      # Router
      - "traefik.http.routers.dozzle-rtr.rule=Host(`dozzle.$DOMAINNAME`)"
      - "traefik.http.routers.dozzle-rtr.entrypoints=websecure"
#      - "traefik.http.routers.dozzle-rtr.tls=true"
      - "traefik.http.routers.dozzle-rtr.tls.certresolver=letsencrypt"
      # Middleware
      - "traefik.http.routers.dozzle-rtr.middlewares=chain-oauth@file"
      # Service
      - "traefik.http.routers.dozzle-rtr.service=dozzle-svc"
      - "traefik.http.services.dozzle-svc.loadbalancer.server.port=8080"

  # Portainer - WebUI for Containers
  portainer:
    container_name: portainer
    image: portainer/portainer:latest
    restart: always
    command: --no-analytics # -H unix:///var/run/docker.sock
    networks:
      - t2proxy
    security_opt:
      - no-new-privileges:true
    ports:
      - "$PORTAINER_PORT:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $SERVICESDIR/portainer/data:/data 
    environment:
      - TZ=$TZ
    labels:
      - "traefik.enable=true"
      # Router
      - "traefik.http.routers.portainer-rtr.rule=Host(`portainer.$DOMAINNAME`)"
      - "traefik.http.routers.portainer-rtr.entrypoints=websecure"
#      - "traefik.http.routers.portainer-rtr.tls=true"
      - "traefik.http.routers.portainer-rtr.tls.certresolver=letsencrypt"
      # Middleware
      - "traefik.http.routers.portainer-rtr.middlewares=chain-oauth@file"
      # Service
      - "traefik.http.routers.portainer-rtr.service=portainer-svc"
      - "traefik.http.services.portainer-svc.loadbalancer.server.port=9000"

  # Netdata - System monitoring
  netdata:
    container_name: netdata
    image: netdata/netdata:latest
    hostname: $HOST_NAME # set to fqdn of host
    restart: unless-stopped
    networks:
      - t2proxy
    ports:
      - $NETDATA_PORT:19999
    cap_add:
      - SYS_PTRACE
    security_opt:
      - apparmor:unconfined
      - no-new-privileges:true
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - PGID=$PGID
    labels:
      - "traefik.enable=true"
      # Router
      - "traefik.http.routers.netdata-rtr.rule=Host(`netdata.$DOMAINNAME`)"
      - "traefik.http.routers.netdata-rtr.entrypoints=websecure"
#      - "traefik.http.routers.netdata-rtr.tls=true"
      - "traefik.http.routers.netdata-rtr.tls.certresolver=letsencrypt"
      # Middleware
      - "traefik.http.routers.netdata-rtr.middlewares=chain-oauth@file"
      # Service
      - "traefik.http.routers.netdata-rtr.service=netdata-svc"
      - "traefik.http.services.netdata-svc.loadbalancer.server.port=19999"

  # Transmission with OpenVpn
  # Setup: https://www.youtube.com/watch?v=aPkRz0U_IPo
  transmission-openvpn:
    image: haugene/transmission-openvpn:latest-armhf
    container_name: transmission-openvpn
    restart: always # If not always, disable WEBPROXY_ENABLED
    networks:
      - myvpn
    ports:
      - "$TRANSMISSIONOPENVPNGUI:9091" # GUI
      - "$TRANSMISSIONOPENVPN:8888" # Transmission Port
    devices:
      - /dev/net/tun # This creates a tunnel for Transmission
    volumes:
      - '$SERVICESDIR/transmissionopenvpn:/config'
      - '$DOWNLOADS/torrent:/data' # Downloads
      - '/etc/localtime:/etc/localtime:ro'
    environment:
      - CREATE_TUN_DEVICE=true
      - OPENVPN_PROVIDER=$OPENVPN_PROVIDER
      # - OPENVPN_CONFIG=CA Toronto # Can be comma separated
      - OPENVPN_USERNAME=$OPENVPN_USERNAME
      - OPENVPN_PASSWORD=$OPENVPN_PASSWORD
      - WEBPROXY_ENABLED=true # Enable other containers to use the vpn
      - LOCAL_NETWORK=192.168.1.0/24 # Match the local network of the host device
      - OPENVPN_OPTS=--inactive 3600 --ping 10 --ping-exit 60 # Restart if connection fails
      - PUID=$PUID
      - PGID=$PGID
      - TRANSMISSION_SCRAPE_PAUSED_TORRENTS_ENABLED=false
      # Connections
      - TRANSMISSION_PEER_LIMIT_GLOBAL=1050
      - TRANSMISSION_MAX_PEERS_GLOBAL=1050
      - TRANSMISSION_PEER_LIMIT_PER_TORRENT=50
      - TRANSMISSION_UPLOAD_SLOTS_PER_TORRENT=5
      - TRANSMISSION_DOWNLOAD_QUEUE_ENABLED=true
      - TRANSMISSION_DOWNLOAD_QUEUE_SIZE=20
      - TRANSMISSION_IDLE_SEEDING_LIM=5
      - TRANSMISSION_IDLE_SEEDING_LIMIT=5
      - TRANSMISSION_IDLE_SEEDING_LIMIT_ENABLED=true
      # Files
      # - TRANSMISSION_PREALLOCATION=1
      # Speed
      - TRANSMISSION_RATIO_LIMIT=2
      - TRANSMISSION_RATIO_LIMIT_ENABLED=true
      - TRANSMISSION_SPEED_LIMIT_UP=20
      - TRANSMISSION_SPEED_LIMIT_UP_ENABLED=true
    cap_add:
      - NET_ADMIN
    logging:
      driver: json-file
      options:
        max-size: 10M
    dns:
      - 8.8.8.8
      - 8.8.4.4

  # Heimdall - Unified Frontend Dashboard
  heimdall:
    container_name: heimdall
    image: linuxserver/heimdall:latest
    restart: unless-stopped
    networks:
      - t2proxy
    security_opt:
      - no-new-privileges:true
    ports:
      - "$HEIMDALL_PORT:80"
    volumes:
      - $SERVICESDIR/heimdall:/config
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - TZ=$TZ
    labels:
      - "traefik.enable=true"
      # Router
      - "traefik.http.routers.heimdall-rtr.rule=Host(`heimdall.$DOMAINNAME`)"
      - "traefik.http.routers.heimdall-rtr.entrypoints=websecure"
#      - "traefik.http.routers.heimdall-rtr.tls=true"
      - "traefik.http.routers.heimdall-rtr.tls.certresolver=letsencrypt"
      # Middleware
      - "traefik.http.routers.heimdall-rtr.middlewares=chain-oauth@file"
      # Service
      - "traefik.http.routers.heimdall-rtr.service=heimdall-svc"
      - "traefik.http.services.heimdall-svc.loadbalancer.server.port=80"

  # Zoneminder
  # References to "home" means the instance (in case there are more than one)
  zoneminder_home:
    image: sgarzarella/zoneminder-armhf:latest
    container_name: zoneminder_home
    restart: unless-stopped
    networks:
      - t2proxy
    security_opt:
      - no-new-privileges:true
    privileged: true
    ports:
      - $ZONEMINDER_PORT:80
      - $ZONEMINDER_WEBSOCKET_PORT:9000
    environment:
      TZ: $TZ
      SHMEM: "50%"
      SSL_EVENTS: "1"
      PUID: $PUID
      PGID: $PGID
    volumes:
      - $SERVICESDIR/zoneminder/home:/config
      - $ZMVIDEODIR/zoneminder_video/home:/var/cache/zoneminder
    labels:
      - "traefik.enable=true"
      # Router
      - "traefik.http.routers.zoneminder_home-rtr.rule=Host(`zoneminderhome.$DOMAINNAME`)"
      - "traefik.http.routers.zoneminder_home-rtr.entrypoints=websecure"
#      - "traefik.http.routers.zoneminder_home-rtr.tls=true"
      - "traefik.http.routers.zoneminder_home-rtr.tls.certresolver=letsencrypt"
      # Middleware
      - "traefik.http.routers.zoneminder_home-rtr.middlewares=chain-zoneminder@file"
      # Service
      - "traefik.http.routers.zoneminder_home-rtr.service=zoneminder_home-svc"
      - "traefik.http.services.zoneminder_home-svc.loadbalancer.server.port=80"

############################# NEXTCLOUD

  # References to "home" means the instance (in case there are more than one)
  
  # MariaDB NextCloud
  nextcloud_home_mariadb:
    container_name: nextcloud_home_mariadb
    image: linuxserver/mariadb:latest
    #command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW
    restart: always
    networks:
      - database
    security_opt:
      - no-new-privileges:true
    ports:
      - $NEXTCLOUDMARIADB:3306
    volumes:
      - $SERVICESDIR/nextcloud_mariadb/home/config:/config
      - $SERVICESDIR/nextcloud_mariadb/home/mysql:/var/lib/mysql
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - MYSQL_ROOT_PASSWORD=$MARIADB_ROOT_PASSWORD_NEXTCLOUD
      - MYSQL_DATABASE=$MARIADB_DATABASE_NEXTCLOUD
      - MYSQL_USER=$MARIADB_USER_NEXTCLOUD
      - MYSQL_PASSWORD=$MARIADB_PASSWORD_NEXTCLOUD

  # NextCloud
  nextcloud_home:
    container_name: nextcloud_home
    image: nextcloud
    networks:
      - database
      - t2proxy
    restart: always
    ports:
      - $NEXTCLOUD:80
    security_opt:
      - no-new-privileges:true
    links:
      - nextcloud_home_mariadb
    volumes:
      - $SERVICESDIR/nextcloud/home:/var/www/html
      - $NEXTCLOUDSTORAGEDIR/nextcloud_storage/home:/var/www/html/data
    labels:
      - "traefik.enable=true"
      # Router
      - "traefik.http.routers.nextcloud_home-rtr.rule=Host(`nextcloudhome.$DOMAINNAME`)"
      - "traefik.http.routers.nextcloud_home-rtr.entrypoints=websecure"
#      - "traefik.http.routers.nextcloud_home-rtr.tls=true"
      - "traefik.http.routers.nextcloud_home-rtr.tls.certresolver=letsencrypt"
      # Middleware
      - "traefik.http.routers.nextcloud_home-rtr.middlewares=chain-no-auth@file"
      # Service
      - "traefik.http.routers.nextcloud_home-rtr.service=nextcloud_home-svc"
      - "traefik.http.services.nextcloud_home-svc.loadbalancer.server.port=80"

  # MariaDB
  blog_mariadb:
    container_name: blog_mariadb
    image: linuxserver/mariadb:latest
    restart: always
    networks:
      - database
    security_opt:
      - no-new-privileges:true
    ports:
      - "$BLOG_MARIADB_PORT:3306"
    volumes:
      - $BLOGDIR/blog_mariadb/data:/config
      - $BLOGDIR/blog_mariadb/mysql:/var/lib/mysql
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - MYSQL_ROOT_PASSWORD=$MARIADB_BLOG_ROOT_PASSWORD
      - MYSQL_DATABASE=$WORDPRESS_BLOG_DB_NAME
      - MYSQL_USER=$WORDPRESS_BLOG_DB_USER
      - MYSQL_PASSWORD=$WORDPRESS_BLOG_DB_PASSWORD

  # WordPress

  # Create file (volumes) php.conf.uploads.ini and paste below content before container creation:
  #file_uploads = On
  #memory_limit = 64M
  #upload_max_filesize = 64M
  #post_max_size = 64M
  #max_execution_time = 600

  blog_wordpress:
    container_name: blog_wordpress
    image: wordpress:5.5
    restart: always
    ports:
      - $BLOG_WORDPRESS_PORT:80
    networks:
      - database
      - t2proxy
    security_opt:
      - no-new-privileges:true
    links:
      - blog_mariadb
    volumes:
#      - $BLOGDIR/blog_wordpress/config/php.conf.uploads.ini:/usr/local/etc/php/conf.d/uploads.ini # Create file in advance
      - $BLOGDIR/blog_wordpress/wp-app:/var/www/html # Full wordpress project
    environment:
      WORDPRESS_DB_HOST: blog_mariadb
      WORDPRESS_DB_NAME: $WORDPRESS_BLOG_DB_NAME
      WORDPRESS_DB_USER: $WORDPRESS_BLOG_DB_USER
      WORDPRESS_DB_PASSWORD: $WORDPRESS_BLOG_DB_PASSWORD
    labels:
      - "traefik.enable=true"
      # Router
      - "traefik.http.routers.blog_wordpress-rtr.rule=Host(`$DOMAINNAME_BLOG`,`www.$DOMAINNAME_BLOG`)"
      - "traefik.http.routers.blog_wordpress-rtr.entrypoints=websecure"
#      - "traefik.http.routers.blog_wordpress-rtr.tls=true"
      - "traefik.http.routers.blog_wordpress-rtr.tls.certresolver=letsencrypt"
      # Middleware
      - "traefik.http.routers.blog_wordpress-rtr.middlewares=chain-no-auth@file"
      # Service
      - "traefik.http.routers.blog_wordpress-rtr.service=blog_wordpress-svc"
      - "traefik.http.services.blog_wordpress-svc.loadbalancer.server.port=80"

  # MariaDB
  myownsite_mariadb:
    container_name: myownsite_mariadb
    image: linuxserver/mariadb:latest
    restart: always
    networks:
      - database
    security_opt:
      - no-new-privileges:true
    ports:
      - "$MYOWNSITE_MARIADB_PORT:3306"
    volumes:
      - $MYOWNSITEDIR/myownsite_mariadb/data:/config
      - $MYOWNSITEDIR/myownsite_mariadb/mysql:/var/lib/mysql
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - MYSQL_ROOT_PASSWORD=$MARIADB_ROOT_PASSWORD
      - MYSQL_DATABASE=$WORDPRESS_DB_NAME
      - MYSQL_USER=$WORDPRESS_DB_USER
      - MYSQL_PASSWORD=$WORDPRESS_DB_PASSWORD

  # WordPress

  # Create file (volumes) php.conf.uploads.ini and paste below content before container creation:
  #file_uploads = On
  #memory_limit = 64M
  #upload_max_filesize = 64M
  #post_max_size = 64M
  #max_execution_time = 600

  myownsite_wordpress:
    container_name: myownsite_wordpress
    image: wordpress:5.5
    restart: always
    networks:
      - database
      - t2proxy
    security_opt:
      - no-new-privileges:true
    ports:
      - $MYOWNSITE_WORDPRESS_PORT:80
    links:
      - myownsite_mariadb
    volumes:
#      - $MYOWNSITEDIR/myownsite_wordpress/config/php.conf.uploads.ini:/usr/local/etc/php/conf.d/uploads.ini # Create file in advance
      - $MYOWNSITEDIR/myownsite_wordpress/wp-app:/var/www/html # Full wordpress project
    environment:
      WORDPRESS_DB_HOST: myownsite_mariadb
      WORDPRESS_DB_NAME: $WORDPRESS_DB_NAME
      WORDPRESS_DB_USER: $WORDPRESS_DB_USER
      WORDPRESS_DB_PASSWORD: $WORDPRESS_DB_PASSWORD
    labels:
      - "traefik.enable=true"
      # Router
      - "traefik.http.routers.myownsite_wordpress-rtr.rule=Host(`$DOMAINNAME`,`www.$DOMAINNAME`)"
      - "traefik.http.routers.myownsite_wordpress-rtr.entrypoints=websecure"
#      - "traefik.http.routers.myownsite_wordpress-rtr.tls=true"
      - "traefik.http.routers.myownsite_wordpress-rtr.tls.certresolver=letsencrypt"
      # Middleware
      - "traefik.http.routers.myownsite_wordpress-rtr.middlewares=chain-no-auth@file"
      # Service
      - "traefik.http.routers.myownsite_wordpress-rtr.service=myownsite_wordpress-svc"
      - "traefik.http.services.myownsite_wordpress-svc.loadbalancer.server.port=80"
